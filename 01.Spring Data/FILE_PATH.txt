private static final String FILE_PATH = "src/main/resources/...";



    private final XmlParser xmlParser;
    private final Gson gson;
    private final ValidationUtil validationUtil;
    private final ModelMapper modelMapper;


-----------------------------------------------------------------------------------------------------------
•Extract from the database the book title, book author, date borrowed and the full name (first name and last name) of the library member. 
•Filter only books that are SCIENCE_FICTION and order them by the borrow date in descending order.

Repository
Set<BorrowingRecord> findAllByBorrowDateBeforeAndBook_GenreOrderByBorrowDateDesc(LocalDate borrowDate, Genre book_genre);
------------------------------------------------------------------------------------------------------------
•Extract from the database, the first name, last name, position, team name and the name of the stadium of the team.
•Select only players with birth date after 01-01-1995 and before 01-01-2003

Repository 
List<Player>findByBirthDateBetweenOrderByStatShootingDescStatPassingDescStatEnduranceDescLastNameAsc(LocalDate after , LocalDate before);

SerciceImpl
        LocalDate after = LocalDate.of(1995,1,1);
        LocalDate before = LocalDate.of(2003,1,1);
        StringBuilder sb = new StringBuilder();
        playerRepository.findByBirthDateBetweenOrderByStatShootingDescStatPassingDescStatEnduranceDescLastNameAsc(after,before)
                .forEach(p ->{
                    sb.append(String.format("\"Player - %s %s\n" +

------------------------------------------------------------------------------------------------------------
@Query("select t from Task t where t.car.carType = 'coupe' order by t.price desc")
------------------------------------------------------------------------------------------------------------

•Extract from the database, the city name, min temperature (to the second digit after decimal point), max temperature (to the second digit after the decimal point), sunrise and sunset of the forecast. 
•Filter only forecasts from sunday and from cities with less than 150000 citizens, order them by max temperature in descending order, then by the forecast id in ascending order.

Repository
 Set<Forecast> findAllByDayOfWeekAndCity_PopulationLessThanOrderByMaxTemperatureDescIdAsc(DaysOfWeek dayOfWeek, Integer city_population);

Serviceimpl
Set<Forecast> allByDayOfWeek_sunday = forecastRepository.findAllByDayOfWeekAndCity_PopulationLessThanOrderByMaxTemperatureDescIdAsc(DaysOfWeek.SUNDAY, 150000);

        allByDayOfWeek_sunday
                .forEach(f -> {
                    sb.append(String.format("City: %s\n" +
                                    "-min temperature: %.2f\n" +
                                    "--max temperature: %.2f\n" +
                                    "---sunrise: %s\n" +
                                    "-----sunset: %s",
                            f.getCity().getCityName(),
                            f.getMinTemperature(),
                            f.getMaxTemperature(),
                            f.getSunrise(),
                            f.getSunset()))
                            .append(System.lineSeparator());
                });
------------------------------------------------------------------------------------------------------------
 @Query(value = "SELECT s FROM Star s WHERE s.starType ='RED_GIANT' AND SIZE(s.observers) = 0 ORDER BY s.lightYears")
    List<Star>findAllByStarTypeAndObserversIsNullOrderByLightYears();
